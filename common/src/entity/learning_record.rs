//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "learning_record")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub record_id: u64,
    pub user_id: u64,
    pub word_id: u64,
    pub mastery_level: i32,
    pub create_time: DateTime,
    pub update_time: DateTime,
    pub is_effective: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
    belongs_to = "super::user::Entity",
    from = "Column::UserId",
    to = "super::user::Column::UserId",
    on_update = "NoAction",
    on_delete = "NoAction"
    )]
    User,
    #[sea_orm(
    belongs_to = "super::word::Entity",
    from = "Column::WordId",
    to = "super::word::Column::WordId",
    on_update = "NoAction",
    on_delete = "NoAction"
    )]
    Word,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::word::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Word.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
