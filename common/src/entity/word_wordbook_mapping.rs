//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "word_wordbook_mapping")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub word_id: u64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub wordbook_id: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::word::Entity",
        from = "Column::WordId",
        to = "super::word::Column::WordId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Word,
    #[sea_orm(
        belongs_to = "super::wordbook::Entity",
        from = "Column::WordbookId",
        to = "super::wordbook::Column::WordbookId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Wordbook,
}

impl Related<super::word::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Word.def()
    }
}

impl Related<super::wordbook::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wordbook.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
