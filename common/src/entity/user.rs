//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub user_id: u64,
    #[sea_orm(unique)]
    pub email: String,
    #[sea_orm(unique)]
    pub username: String,
    pub pw_hash: String,
    pub wordbook_id: u64,
    pub create_time: DateTime,
    pub is_effective: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::learning_record::Entity")]
    LearningRecord,
    #[sea_orm(
    belongs_to = "super::wordbook::Entity",
    from = "Column::WordbookId",
    to = "super::wordbook::Column::WordbookId",
    on_update = "NoAction",
    on_delete = "NoAction"
    )]
    Wordbook,
}

impl Related<super::learning_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LearningRecord.def()
    }
}

impl Related<super::wordbook::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wordbook.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
