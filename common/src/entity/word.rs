//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Eq, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "word")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub word_id: u64,
    pub word: String,
    pub phonogram: Option<String>,
    pub definition: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub example_sentence: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::learning_record::Entity")]
    LearningRecord,
    #[sea_orm(has_many = "super::word_wordbook_mapping::Entity")]
    WordWordbookMapping,
}

impl Related<super::learning_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LearningRecord.def()
    }
}

impl Related<super::word_wordbook_mapping::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WordWordbookMapping.def()
    }
}

impl Related<super::wordbook::Entity> for Entity {
    fn to() -> RelationDef {
        super::word_wordbook_mapping::Relation::Wordbook.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::word_wordbook_mapping::Relation::Word.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
